image: docker:24.0

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:24.0-dind

stages:
  - lint
  - test
  - build
  - release

before_script:
  - docker info

# Format check
format-check:
  stage: lint
  image: golang:1.24-alpine
  before_script:
    - apk add --no-cache git
  script:
    - |
      if [ -n "$(gofmt -l .)" ]; then
        echo "Code is not formatted. Please run 'go fmt ./...'"
        gofmt -d .
        exit 1
      fi
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Linting
lint:
  stage: test
  image: golang:1.24-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  script:
    - golangci-lint run
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Unit tests
test:
  stage: test
  image: golang:1.24-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev
  script:
    - go mod download
    - go test -v $(go list ./... | grep -v /e2e) -coverprofile=coverage.out -covermode=count
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Integration tests
integration-test:
  stage: test
  image: golang:1.24-alpine
  before_script:
    - apk add --no-cache git gcc musl-dev dbus
  script:
    - go mod download
    - go test -v -run TestE2E ./...
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Development build
build-dev:
  stage: build
  script:
    - docker buildx create --use
    - docker buildx bake --set *.platform=linux/amd64 dev
  artifacts:
    paths:
      - bin/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Merge request build
build-mr:
  stage: build
  script:
    - docker buildx create --use
    - docker buildx bake --set *.platform=linux/amd64 dev
  artifacts:
    paths:
      - bin/
    expire_in: 1 day
  rules:
    - if: $CI_MERGE_REQUEST_ID

# Nix build
nix-build:
  stage: build
  image: nixos/nix:latest
  before_script:
    - echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf
  script:
    - nix flake check
    - nix build
  artifacts:
    paths:
      - result
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Release build
release:
  stage: release
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      export VERSION=${CI_COMMIT_TAG:-dev}
      docker buildx create --use
      docker buildx bake --push release
  artifacts:
    paths:
      - bin/
  rules:
    - if: $CI_COMMIT_TAG

# Docker image release
docker-release:
  stage: release
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
      export VERSION=${CI_COMMIT_TAG:-latest}
      docker buildx create --use
      docker buildx bake --push --set release.tags=$CI_REGISTRY_IMAGE:$VERSION release
  rules:
    - if: $CI_COMMIT_TAG